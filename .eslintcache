[{"C:\\Users\\dany2\\Projects\\weather-by-evergreen\\src\\index.js":"1","C:\\Users\\dany2\\Projects\\weather-by-evergreen\\src\\WeatherApp.js":"2","C:\\Users\\dany2\\Projects\\weather-by-evergreen\\src\\components\\Weather.js":"3","C:\\Users\\dany2\\Projects\\weather-by-evergreen\\src\\functions\\loadData.js":"4"},{"size":162,"mtime":1628510374691,"results":"5","hashOfConfig":"6"},{"size":1178,"mtime":1628510991953,"results":"7","hashOfConfig":"6"},{"size":719,"mtime":1628510532199,"results":"8","hashOfConfig":"6"},{"size":271,"mtime":1628502392970,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ymkdik",{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\dany2\\Projects\\weather-by-evergreen\\src\\index.js",[],"C:\\Users\\dany2\\Projects\\weather-by-evergreen\\src\\WeatherApp.js",["20","21"],"import React, { useEffect, useState } from 'react';\nimport Weather from './components/Weather';\n\nclass WeatherApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: 'Moscow' };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  handleSubmit(event) {\n    this.setState({ value: event.target.value });\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <div className=\"city-form\">\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            Pick your city:\n            <select value={this.state.value} onChange={this.handleChange}>\n              <option value=\"Moscow\">Moscow</option>\n              <option value=\"Samara\">Samara</option>\n              <option value=\"Murmansk\">Murmansk</option>\n              <option value=\"Vladivostok\">Vladivostok</option>\n            </select>\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n        <Weather location={this.state.value} />\n      </div>\n    );\n  }\n}\n\n\nexport default WeatherApp;","C:\\Users\\dany2\\Projects\\weather-by-evergreen\\src\\components\\Weather.js",["22"],"import React, { useEffect, useState } from 'react';\r\nimport loadData from '../functions/loadData';\r\nimport './Weather.css';\r\n\r\nconst Weather = (props) => {\r\n  const { location } = props;\r\n  const [temp, setTemp] = useState('NOT FOUND');\r\n\r\n  const loadWeather = async () => {\r\n    const data = await loadData(location);\r\n    setTemp(data.temperature);\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadWeather(location);\r\n  }, [loadWeather, location]);\r\n\r\n  return (\r\n    <div className=\"weather-app border\">\r\n      <h1>How do you like the weather in {location}?</h1>\r\n      <h2>It's {temp} outside :)</h2>\r\n      <button onClick={loadWeather} className=\"btn-update\">Update</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Weather;","C:\\Users\\dany2\\Projects\\weather-by-evergreen\\src\\functions\\loadData.js",[],{"ruleId":"23","severity":1,"message":"24","line":1,"column":17,"nodeType":"25","messageId":"26","endLine":1,"endColumn":26},{"ruleId":"23","severity":1,"message":"27","line":1,"column":28,"nodeType":"25","messageId":"26","endLine":1,"endColumn":36},{"ruleId":"28","severity":1,"message":"29","line":9,"column":9,"nodeType":"30","endLine":12,"endColumn":4,"suggestions":"31"},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","react-hooks/exhaustive-deps","The 'loadWeather' function makes the dependencies of useEffect Hook (at line 16) change on every render. To fix this, wrap the definition of 'loadWeather' in its own useCallback() Hook.","VariableDeclarator",["32"],{"desc":"33","fix":"34"},"Wrap the definition of 'loadWeather' in its own useCallback() Hook.",{"range":"35","text":"36"},[262,356],"useCallback(async () => {\r\n    const data = await loadData(location);\r\n    setTemp(data.temperature);\r\n  })"]