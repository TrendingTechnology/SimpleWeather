{"version":3,"sources":["components/Forecast.js","components/WeatherCondition.js","components/CitySearch.js","functions/useDebounce.js","functions/loadData.js","App.js","index.js"],"names":["Forecast","props","temp","location","responseCity","className","WeatherCondition","condition","CitySearch","minWidth","inputStyle","fontSize","value","onChange","e","useDebounce","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","loadData","a","fetch","response","json","data","console","log","error","App","setLocation","setTemp","setResponseCity","setCondition","debouncedLocation","loadWeather","current","temp_c","name","text","toLowerCase","memoLoadWeather","useCallback","event","target","ReactDOM","render","document","getElementById"],"mappings":"+RAwBeA,EArBE,SAACC,GAChB,IAAQC,EAASD,EAATC,KACAC,EAAaF,EAAbE,SACAC,EAAiBH,EAAjBG,aAER,OAAKF,GAAQC,IAAaC,EAMtBF,EAEA,sBAAKG,UAAU,iBAAf,UACE,iEAAoCF,EAApC,OACA,uCAAUD,EAAV,+BAJN,EAJI,yB,gBCUSI,EAlBU,SAACL,GACxB,IAAQE,EAAaF,EAAbE,SACAC,EAAiBH,EAAjBG,aACAG,EAAcN,EAAdM,UAER,OAAKA,GAAaJ,IAAaC,EAM3BG,EAEA,+BAAOA,SAFX,EAJI,0BCWSC,G,MAfI,SAACP,GAClB,OACE,sBAAKI,UAAU,cAAf,yBAEE,cAAC,IAAD,CACEI,SAAS,KACTC,WAAY,CAAEC,SAAU,IACxBC,MAAOX,EAAMW,MACbC,SAAU,SAACC,GAAD,OAAOb,EAAMY,SAASC,MAElC,cAAC,EAAD,CAAkBP,UAAWN,EAAMM,UAAWJ,SAAUF,EAAME,SAAUC,aAAcH,EAAMG,oBCAnFW,MAbf,SAAqBH,EAAOI,GAC1B,MAA4CC,mBAASL,GAArD,mBAAOM,EAAP,KAAuBC,EAAvB,KASA,OAPAC,qBACE,WACE,IAAMC,EAAUC,YAAW,kBAAMH,EAAkBP,KAAQI,GAC3D,OAAO,kBAAMO,aAAaF,MACzB,CAACL,EAAOJ,IAGNM,GCCMM,EAbD,uCAAG,WAAOrB,GAAP,iBAAAsB,EAAA,+EAEUC,MAAM,oFAAD,OAAqFvB,EAArF,YAFf,cAEPwB,EAFO,gBAGMA,EAASC,OAHf,cAGPC,EAHO,OAIbC,QAAQC,IAAIF,GAJC,kBAKNA,GALM,kCAObC,QAAQE,MAAR,MAPa,0DAAH,sDC+CCC,EAtCH,WACV,MAAgChB,mBAAS,IAAzC,mBAAOd,EAAP,KAAiB+B,EAAjB,KACA,EAAwBjB,mBAAS,IAAjC,mBAAOf,EAAP,KAAaiC,EAAb,KACA,EAAwClB,mBAAS,IAAjD,mBAAOb,EAAP,KAAqBgC,EAArB,KACA,EAAkCnB,mBAAS,IAA3C,mBAAOV,EAAP,KAAkB8B,EAAlB,KACMC,EAAoBvB,EAAYZ,EAAU,KAE1CoC,EAAW,uCAAG,4BAAAd,EAAA,+EAEID,EAASc,GAFb,OAEVT,EAFU,OAGhBM,EAAQN,EAAKW,QAAQC,QACrBL,EAAgBP,EAAK1B,SAASuC,MAC9BL,EAAa,QAAD,OAAUR,EAAKW,QAAQjC,UAAUoC,KAAMC,gBALnC,gDAOhBd,QAAQE,MAAR,MAPgB,yDAAH,qDAWXa,EAAkBC,sBAAYP,EAAa,CAACD,IAElDlB,qBAAU,WACJkB,GACFO,MAED,CAACP,EAAmBO,IAMvB,OACE,sBAAKxC,UAAU,MAAf,UACE,cAAC,EAAD,CAAYO,MAAOT,EAAUU,SANb,SAACkC,GACnBb,EAAYa,EAAMC,OAAOpC,QAK6BL,UAAWA,EAAWJ,SAAUmC,EAAmBlC,aAAcA,IACrH,cAAC,EAAD,CAAUF,KAAMA,EAAMC,SAAUmC,EAAmBlC,aAAcA,QCtCvE6C,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.486d58ef.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './Forecast.css';\r\n\r\nconst Forecast = (props) => {\r\n  const { temp } = props;\r\n  const { location } = props;\r\n  const { responseCity } = props;\r\n\r\n  if (!temp || location !== responseCity) {\r\n    return (\r\n      <div></div>\r\n    );\r\n  }\r\n\r\n  if (temp) {\r\n    return (\r\n      <div className=\"weather border\">\r\n        <h1>How do you like the weather in {location}?</h1>\r\n        <h2>It's {temp} CÂ° outside :)</h2>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Forecast;","import React, { useEffect, useState } from 'react';\r\n\r\nconst WeatherCondition = (props) => {\r\n  const { location } = props;\r\n  const { responseCity } = props;\r\n  const { condition } = props;\r\n\r\n  if (!condition || location !== responseCity) {\r\n    return (\r\n      <span></span>\r\n    );\r\n  }\r\n\r\n  if (condition) {\r\n    return (\r\n      <span>{condition}</span>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WeatherCondition;\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport AutosizeInput from 'react-input-autosize';\r\nimport WeatherCondition from './WeatherCondition';\r\nimport './CitySearch.css';\r\n\r\nconst CitySearch = (props) => {\r\n  return (\r\n    <div className=\"city-search\">\r\n      Right now in\r\n      <AutosizeInput\r\n        minWidth=\"70\"\r\n        inputStyle={{ fontSize: 30 }}\r\n        value={props.value}\r\n        onChange={(e) => props.onChange(e)}\r\n      />\r\n      <WeatherCondition condition={props.condition} location={props.location} responseCity={props.responseCity} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CitySearch;","import React, { useEffect, useState } from 'react';\r\n\r\nfunction useDebounce(value, delay) {\r\n  const [debouncedValue, setDebouncedValue] = useState(value);\r\n\r\n  useEffect(\r\n    () => {\r\n      const handler = setTimeout(() => setDebouncedValue(value), delay);\r\n      return () => clearTimeout(handler);\r\n    }, [delay, value],\r\n  );\r\n\r\n  return debouncedValue;\r\n}\r\n\r\nexport default useDebounce;","const loadData = async (location) => {\r\n  try {\r\n    const response = await fetch(`https://api.weatherapi.com/v1/current.json?key=7de576d75ec1409fbc9122745211208&q=${location}&aqi=no`);\r\n    const data = await response.json();\r\n    console.log(data);\r\n    return data;\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n};\r\n\r\n\r\n\r\nexport default loadData;","import React, { useCallback, useEffect, useState } from 'react';\nimport { debounce } from 'lodash';\n\nimport Forecast from './components/Forecast';\nimport CitySearch from './components/CitySearch';\n\nimport useDebounce from './functions/useDebounce';\nimport loadData from './functions/loadData';\n\nconst App = () => {\n  const [location, setLocation] = useState('');\n  const [temp, setTemp] = useState('');\n  const [responseCity, setResponseCity] = useState('');\n  const [condition, setCondition] = useState('');\n  const debouncedLocation = useDebounce(location, 700);\n\n  const loadWeather = async () => {\n    try {\n      const data = await (loadData(debouncedLocation));\n      setTemp(data.current.temp_c);\n      setResponseCity(data.location.name);\n      setCondition(`it's ${(data.current.condition.text).toLowerCase()}`);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const memoLoadWeather = useCallback(loadWeather, [debouncedLocation]);\n\n  useEffect(() => {\n    if (debouncedLocation) {\n      memoLoadWeather();\n    }\n  }, [debouncedLocation, memoLoadWeather]);\n\n  const handleEvent = (event) => {\n    setLocation(event.target.value)\n  }\n\n  return (\n    <div className=\"app\">\n      <CitySearch value={location} onChange={handleEvent} condition={condition} location={debouncedLocation} responseCity={responseCity} />\n      <Forecast temp={temp} location={debouncedLocation} responseCity={responseCity} />\n    </div>\n  );\n}\n\nexport default App;","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}