{"version":3,"sources":["helpers/fetchData.js","store/weatherReducer/actionTypes.js","store/weatherReducer/weatherReducer.js","store/favoriteCitiesReducer/actionTypes.js","store/favoriteCitiesReducer/favoriteCitiesReducer.js","store/store.js","helpers/useDebounce.js","components/CitySearch.js","components/WeatherIcon.js","components/WeatherTempScale.js","components/WeatherCondition.js","components/Forecast.js","components/UI/FavoriteButton.js","components/FavoriteCityButton.js","components/UI/ListButton.js","pages/WeatherToday.js","historyVar.js","components/UI/BackButton.js","components/CitiesPageBackButton.js","components/CitiesList.js","components/TempScaleToggle.js","pages/CitiesPage.js","pages/CityPage.js","App.js","index.js"],"names":["fetchData","location","a","fetch","response","json","data","console","error","SET_CITY","UPDATE_WEATHER","CHANGE_TEMP_SCALE","setCity","city","type","payload","changeTempScale","initialState","responseLocation","country","temp_c","temp_f","condition","wind","pressure","humidity","code","isDay","tempScale","ADD_TO_FAVORITES","REMOVE_FROM_FAVORITES","GET_CITIES","UPDATE_TEMP","updateTemp","citiesState","arrOfCities","addToFavorites","dispatch","store","addCity","removeFromFavorites","removeCity","composedEnhancer","composeWithDevTools","applyMiddleware","thunkMiddleware","rootReducer","combineReducers","cities","state","action","lastUpdated","filter","obj","map","name","toLowerCase","current","toFixed","Date","now","weatherData","text","wind_kph","pressure_mb","is_day","createStore","useDebounce","value","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","connect","favoriteCities","onChange","event","target","props","localStorage","getItem","setItem","debouncedLocation","trim","memoLoadWeather","useCallback","fetchWeather","className","minWidth","inputStyle","fontSize","fontWeight","display","e","timeOfDay","weatherSrc","process","windToMPS","pressureToMmOfMercury","FavoriteButton","Checkbox","icon","FavoriteBorder","checkedIcon","Favorite","size","sx","color","objOfCity","find","isFavorite","setFavorite","isDisabled","setDisabled","JSON","stringify","onClick","disabled","checked","ListButton","IconButton","to","history","createBrowserHistory","BackButton","CitiesPageBackButton","backgroundColor","updateCityInStore","router","useHistory","length","push","setValue","ToggleButtonGroup","exclusive","fullWidth","height","ToggleButton","borderRadius","borderColor","textTransform","fetchCityTemp","params","useParams","App","exact","path","citiesStr","parse","theme","createTheme","palette","primary","main","darker","secondary","rootElement","document","getElementById","ReactDOM","render","basename"],"mappings":"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","file":"static/js/main.a7e26b13.chunk.js","sourcesContent":["const fetchData = async (location) => {\r\n    try {\r\n        const response = await fetch(`https://api.weatherapi.com/v1/current.json?key=bec0a55c5686475981d152146211810&q=${location}&aqi=no`);\r\n        const data = await response.json();\r\n        return data;\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\n\r\nexport default fetchData;","export const SET_CITY = 'SET_CITY';\r\nexport const UPDATE_WEATHER = 'UPDATE_WEATHER';\r\nexport const CHANGE_TEMP_SCALE = 'CHANGE_TEMP_SCALE';","import fetchData from \"../../helpers/fetchData\";\r\nimport store from \"../store\";\r\nimport {CHANGE_TEMP_SCALE, SET_CITY, UPDATE_WEATHER} from \"./actionTypes\";\r\n\r\nexport const setCity = (city) => ({type: SET_CITY, payload: city})\r\nexport const updateWeather = (response) => ({type: UPDATE_WEATHER, payload: response})\r\nexport const changeTempScale = (response) => ({type: CHANGE_TEMP_SCALE, payload: response})\r\n\r\nexport const initialState = {\r\n    location: '',\r\n    responseLocation: '',\r\n    country: '',\r\n    temp_c: '',\r\n    temp_f: '',\r\n    condition: '',\r\n    wind: '',\r\n    pressure: '',\r\n    humidity: '',\r\n    code: '',\r\n    isDay: '',\r\n    tempScale: 'celsius'\r\n};\r\n\r\nexport function weatherReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_CITY:\r\n            return {...state, location: action.payload.toLowerCase()};\r\n        case UPDATE_WEATHER:\r\n            return {\r\n                ...state,\r\n                responseLocation: action.payload.location.name,\r\n                country: action.payload.location.country,\r\n                temp_c: action.payload.current.temp_c.toFixed(),\r\n                temp_f: action.payload.current.temp_f.toFixed(),\r\n                condition: action.payload.current.condition.text.toLowerCase(),\r\n                wind: action.payload.current.wind_kph,\r\n                pressure: action.payload.current.pressure_mb,\r\n                humidity: action.payload.current.humidity,\r\n                code: action.payload.current.condition.code,\r\n                isDay: action.payload.current.is_day,\r\n            };\r\n        case CHANGE_TEMP_SCALE:\r\n            return {\r\n                ...state,\r\n                tempScale: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const fetchWeather = (debouncedLocation) => async (dispatch) => {\r\n    try {\r\n        const data = await (fetchData(debouncedLocation));\r\n        store.dispatch(updateWeather(data));\r\n        localStorage.setItem('location', data.location.name);\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n}","export const ADD_TO_FAVORITES = \"ADD_TO_FAVORITES\";\r\nexport const REMOVE_FROM_FAVORITES = \"REMOVE_FROM_FAVORITES\";\r\nexport const GET_CITIES = \"GET_CITIES\";\r\nexport const UPDATE_TEMP = \"UPDATE_TEMP\";","import store from \"../store\";\r\nimport {ADD_TO_FAVORITES, GET_CITIES, REMOVE_FROM_FAVORITES, UPDATE_TEMP} from \"./actionTypes\";\r\nimport fetchData from \"../../helpers/fetchData\";\r\n\r\nexport const addCity = (city) => ({type: ADD_TO_FAVORITES, payload: city})\r\nexport const removeCity = (city) => ({type: REMOVE_FROM_FAVORITES, payload: city})\r\nexport const getCitiesFromLocaleStorage = (cities) => ({type: GET_CITIES, payload: cities})\r\nexport const updateTemp = (data) => ({type: UPDATE_TEMP, payload: data})\r\n\r\nexport const citiesState = {\r\n    arrOfCities: [],\r\n};\r\n\r\nexport function favoriteCitiesReducer(state = citiesState, action) {\r\n    switch (action.type) {\r\n        case ADD_TO_FAVORITES:\r\n            return {\r\n                ...state,\r\n                arrOfCities: [...state.arrOfCities, {\r\n                    city: action.payload.city,\r\n                    temp_c: action.payload.temp_c,\r\n                    temp_f: action.payload.temp_f,\r\n                    lastUpdated: action.payload.lastUpdated,\r\n                }]\r\n            };\r\n        case REMOVE_FROM_FAVORITES:\r\n            return {\r\n                ...state,\r\n                arrOfCities: state.arrOfCities.filter(\r\n                    (obj) => obj.city !== action.payload\r\n                ),\r\n            };\r\n        case GET_CITIES:\r\n            return {\r\n                ...state,\r\n                arrOfCities: action.payload,\r\n            };\r\n        case UPDATE_TEMP:\r\n            return {\r\n                ...state,\r\n                arrOfCities: state.arrOfCities.map((obj) => obj.city === action.payload.location.name.toLowerCase() ? {\r\n                    ...obj, temp_c: action.payload.current.temp_c.toFixed(),\r\n                    temp_f: action.payload.current.temp_f.toFixed(),\r\n                    lastUpdated: Date.now(),\r\n                } : obj)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addToFavorites = (city) => (dispatch) => {\r\n    store.dispatch(addCity(city));\r\n};\r\nexport const removeFromFavorites = (city) => (dispatch) => {\r\n    store.dispatch(removeCity(city));\r\n};\r\n\r\nexport const fetchCityTemp = (city) => async (dispatch) => {\r\n    try {\r\n        const data = await (fetchData(city));\r\n        store.dispatch(updateTemp(data));\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n}","import {createStore, combineReducers, applyMiddleware} from 'redux';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport {weatherReducer} from \"./weatherReducer/weatherReducer\";\r\nimport {favoriteCitiesReducer} from \"./favoriteCitiesReducer/favoriteCitiesReducer\";\r\n\r\nconst composedEnhancer = composeWithDevTools(applyMiddleware(thunkMiddleware))\r\n\r\nconst rootReducer = combineReducers({\r\n    cities: favoriteCitiesReducer,\r\n    weatherData: weatherReducer\r\n})\r\n\r\nlet store = createStore(rootReducer, composedEnhancer);\r\nexport default store;","import {useEffect, useState} from 'react';\r\n\r\nfunction useDebounce(value, delay) {\r\n    const [debouncedValue, setDebouncedValue] = useState(value);\r\n\r\n    useEffect(\r\n        () => {\r\n            const handler = setTimeout(() => setDebouncedValue(value), delay);\r\n            return () => clearTimeout(handler);\r\n        }, [delay, value],\r\n    );\r\n\r\n    return debouncedValue;\r\n}\r\n\r\nexport default useDebounce;","import React, {useCallback, useEffect} from \"react\";\r\nimport AutosizeInput from \"react-input-autosize\";\r\nimport {connect} from \"react-redux\";\r\nimport \"../styles/CitySearch.css\";\r\nimport {fetchWeather, setCity} from \"../store/weatherReducer/weatherReducer\";\r\nimport store from \"../store/store\";\r\nimport useDebounce from \"../helpers/useDebounce\";\r\n\r\nconst CitySearch = (props) => {\r\n    useEffect(() => {\r\n        if (localStorage.getItem('location') && props.location === '') {\r\n            store.dispatch(setCity(localStorage.getItem('location')));\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            localStorage.setItem('location', props.location);\r\n        };\r\n    }, []);\r\n\r\n    const debouncedLocation = useDebounce(props.location.trim(), 700);\r\n\r\n    const memoLoadWeather = useCallback(fetchWeather(debouncedLocation), [debouncedLocation]);\r\n\r\n    useEffect(() => {\r\n        if (debouncedLocation) {\r\n            memoLoadWeather();\r\n        }\r\n    }, [debouncedLocation, memoLoadWeather]);\r\n\r\n    return (\r\n        <div className='search'>\r\n            <h1>Right now in</h1>\r\n            <AutosizeInput\r\n                type='text'\r\n                minWidth='70'\r\n                inputStyle={{fontSize: 35, fontWeight: 600, display: 'block'}}\r\n                value={props.location}\r\n                onChange={(e) => props.onChange(e)}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    location: state.weatherData.location,\r\n    favoriteCities: state.weatherData.favoriteCities\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    onChange: (event) => {\r\n        dispatch(setCity(event.target.value));\r\n    }\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CitySearch);\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport \"../styles/Forecast.css\";\r\n\r\nconst WeatherIcon = (props) => {\r\n    let timeOfDay = 'day';\r\n    if (!props.isDay) {\r\n        timeOfDay = 'night';\r\n    }\r\n\r\n    const weatherSrc = `${process.env.PUBLIC_URL}/assets/icons/${timeOfDay}/${props.code}.svg`;\r\n\r\n    return (\r\n        <div className='weather__icon'>\r\n            <object data={weatherSrc} className='weather__icon' type='image/svg+xml'\r\n                    aria-label='icon of weather'/>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    code: state.weatherData.code,\r\n    isDay: state.weatherData.isDay\r\n})\r\nexport default connect(mapStateToProps)(WeatherIcon);","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\n\r\nconst WeatherTempScale = (props) => {\r\n    if (props.tempScale === 'celsius') {\r\n        return (\r\n            <h1 className='celsius'>\r\n                {props.temp_c}\r\n            </h1>\r\n        )\r\n    } else {\r\n        return (\r\n            <h1 className='fahrenheit'>\r\n                {props.temp_f}\r\n            </h1>\r\n        )\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    tempScale: state.weatherData.tempScale,\r\n    temp_c: state.weatherData.temp_c,\r\n    temp_f: state.weatherData.temp_f\r\n})\r\n\r\nexport default connect(mapStateToProps)(WeatherTempScale);","import React from 'react';\r\nimport '../styles/Forecast.css';\r\nimport {connect} from 'react-redux';\r\n\r\nconst WeatherCondition = (props) => {\r\n        return (\r\n            <div className='condition'>it's {props.condition}</div>\r\n        )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    location: state.weatherData.location,\r\n    responseLocation: state.weatherData.responseLocation,\r\n    condition: state.weatherData.condition,\r\n})\r\n\r\nexport default connect(mapStateToProps)(WeatherCondition);\r\n\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport WeatherIcon from './WeatherIcon';\r\nimport '../styles/Forecast.css';\r\nimport WeatherTempScale from \"./WeatherTempScale\";\r\nimport WeatherCondition from \"./WeatherCondition\";\r\n\r\nconst Forecast = (props) => {\r\n    // Conversion from kph to m/s\r\n    const windToMPS = (props.wind * 1000 / 3600).toFixed(1);\r\n    // Conversion from millibars to millimeters of mercury according to the formula\r\n    const pressureToMmOfMercury = (props.pressure * 0.750063755419211).toFixed();\r\n\r\n    return (\r\n        <div>\r\n            <WeatherCondition/>\r\n            <div className='weather grid'>\r\n                <WeatherIcon/>\r\n                <div className='weather__temp'>\r\n                    <WeatherTempScale className='weather__temp-scale'/>\r\n                </div>\r\n                <div className='flex weather__properties'>\r\n                    <div className='properties__value'>{windToMPS}<span>m/s</span></div>\r\n\r\n                    <div className='properties__value'>{pressureToMmOfMercury}<span>mm Hg</span></div>\r\n                    <div className='properties__value'>{props.humidity}<span>%</span></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    location: state.weatherData.location,\r\n    responseLocation: state.weatherData.responseLocation,\r\n    wind: state.weatherData.wind,\r\n    pressure: state.weatherData.pressure,\r\n    humidity: state.weatherData.humidity,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Forecast);\r\n","import React from \"react\";\r\nimport {Favorite, FavoriteBorder} from \"@mui/icons-material\";\r\nimport {Checkbox} from \"@mui/material\";\r\n\r\nconst FavoriteButton = (props) => {\r\n    return (\r\n        <Checkbox\r\n            {...props}\r\n            icon={<FavoriteBorder/>}\r\n            checkedIcon={<Favorite/>}\r\n            size='large'\r\n            sx={{\r\n                color: 'white',\r\n                '&.Mui-checked': {\r\n                    color: 'white',\r\n                },\r\n                '&.Mui-disabled': {\r\n                    color: 'transparent',\r\n                }\r\n            }}\r\n        />\r\n    );\r\n};\r\nexport default FavoriteButton;\r\n","import React, {useEffect, useState} from \"react\";\r\nimport FavoriteButton from \"./UI/FavoriteButton\";\r\nimport {connect} from \"react-redux\";\r\nimport {addToFavorites, removeFromFavorites} from \"../store/favoriteCitiesReducer/favoriteCitiesReducer\";\r\n\r\nconst FavoriteCityButton = (props) => {\r\n    const [isFavorite, setFavorite] = useState(props.cities.find(obj => obj.city === props.location))\r\n    const [isDisabled, setDisabled] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setFavorite(props.cities.find(obj => obj.city === props.location));\r\n    }, [props.location, props.responseLocation]);\r\n\r\n    useEffect(() => {\r\n        if (\r\n            props.location &&\r\n            props.location === props.responseLocation.toLowerCase()\r\n        ) {\r\n            setDisabled(false);\r\n        } else {\r\n            setDisabled(true);\r\n        }\r\n    }, [props.location, props.responseLocation]);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('cities', JSON.stringify(props.cities));\r\n    }, [props.cities]);\r\n\r\n    return (\r\n        <FavoriteButton\r\n            onClick={() => {\r\n                if (!isFavorite) {\r\n                    props.addToFavorites({\r\n                        city: props.location,\r\n                        temp_c: props.temp_c,\r\n                        temp_f: props.temp_f,\r\n                        lastUpdated: Date.now()\r\n                    });\r\n                    setFavorite(!isFavorite);\r\n                } else {\r\n                    props.removeFromFavorites(props.location);\r\n                    setFavorite(!isFavorite);\r\n                }\r\n            }}\r\n            disabled={isDisabled}\r\n            checked={!!isFavorite}\r\n        />\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    location: state.weatherData.location,\r\n    responseLocation: state.weatherData.responseLocation,\r\n    temp_c: state.weatherData.temp_c,\r\n    temp_f: state.weatherData.temp_f,\r\n    cities: state.cities.arrOfCities,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    addToFavorites: (objOfCity) => {\r\n        dispatch(addToFavorites(objOfCity));\r\n    },\r\n    removeFromFavorites: (city) => {\r\n        dispatch(removeFromFavorites(city));\r\n    },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FavoriteCityButton);\r\n","import React from \"react\";\r\nimport {IconButton} from \"@mui/material\";\r\nimport FormatListBulletedIcon from '@mui/icons-material/FormatListBulleted';\r\n\r\nconst ListButton = () => {\r\n    return (\r\n        <IconButton size='large' sx={{color: 'white'}}>\r\n            <FormatListBulletedIcon fontSize='large'/>\r\n        </IconButton>\r\n    );\r\n};\r\n\r\nexport default ListButton;\r\n","import React from \"react\";\r\nimport CitySearch from \"../components/CitySearch\";\r\nimport Forecast from \"../components/Forecast\";\r\nimport FavoriteCityButton from \"../components/FavoriteCityButton\";\r\nimport ListButton from \"../components/UI/ListButton\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst WeatherToday = (props) => {\r\n    if (props.responseLocation && props.location === props.responseLocation.toLowerCase()) {\r\n        return (\r\n            <div>\r\n                <div className='app'>\r\n                    <FavoriteCityButton/>\r\n                    <Link to='/SimpleWeather/cities' className='app__list-button'>\r\n                        <ListButton/>\r\n                    </Link>\r\n                    <CitySearch/>\r\n                    <Forecast/>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n                <div className='app'>\r\n                    <FavoriteCityButton/>\r\n                    <Link to='/SimpleWeather/cities' className='app__list-button'>\r\n                        <ListButton/>\r\n                    </Link>\r\n                    <CitySearch/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    location: state.weatherData.location,\r\n    responseLocation: state.weatherData.responseLocation,\r\n})\r\n\r\nexport default connect(mapStateToProps)(WeatherToday);\r\n","import {createBrowserHistory} from 'history';\r\n\r\nexport const history = createBrowserHistory();\r\n","import React from 'react';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport {IconButton} from \"@mui/material\";\r\n\r\nconst BackButton = (props) => {\r\n    return (\r\n        <IconButton size='large' {...props}>\r\n            <ArrowBackIcon fontSize='large'/>\r\n        </IconButton>\r\n    );\r\n};\r\n\r\nexport default BackButton;","import React from \"react\";\r\nimport BackButton from \"./UI/BackButton\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst CitiesPageBackButton = () => {\r\n    return (\r\n        <Link to='/SimpleWeather' className='cities-page__back-btn'>\r\n            <BackButton\r\n                sx={{color: '#2D81FF', '&.MuiIconButton-root:hover': {backgroundColor: 'rgba(45, 129, 255, 0.02)'}}}/>\r\n        </Link>\r\n    );\r\n};\r\n\r\nexport default CitiesPageBackButton;\r\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport \"../styles/CitiesList.css\";\nimport {useHistory} from \"react-router-dom\";\nimport {setCity} from \"../store/weatherReducer/weatherReducer\";\n\nconst CitiesList = (props) => {\n    const router = useHistory();\n    if (props.cities.length > 0) {\n        return (\n            <div className='flex cities-list'>\n                <div className='blue-line'></div>\n                <div className='cities'>\n                    {props.cities.map((obj) => (\n                        <button\n                            onClick={() => {\n                                router.push(`/SimpleWeather/cities/${obj.city}`);\n                                props.updateCityInStore(obj.city);\n                            }}\n                            className='cities__btn'\n                            key={obj.city}\n                        >\n                            <div>{obj.city}</div>\n                            <div>{props.tempScale === \"celsius\" ? obj.temp_c : obj.temp_f }°</div>\n                        </button>\n                    ))}\n                </div>\n            </div>\n        );\n    } else {\n        return (\n            <div className='flex cities-list'>\n                <div className='blue-line'></div>\n                <div className='cities-empty'>\n                    <p>Oops!</p>\n                    <p>You haven't added any city yet!</p>\n                </div>\n                <div className='blue-line'></div>\n            </div>\n        );\n    }\n};\n\nconst mapStateToProps = (state) => ({\n    cities: state.cities.arrOfCities,\n    tempScale: state.weatherData.tempScale,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    updateCityInStore: (city) => {\n        dispatch(setCity(city));\n    }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CitiesList);\n","import React, {useState} from \"react\";\nimport {ToggleButton, ToggleButtonGroup} from \"@mui/material\";\nimport \"../styles/TempScaleToggle.css\";\nimport {connect} from \"react-redux\";\nimport {changeTempScale} from \"../store/weatherReducer/weatherReducer\";\n\nconst TempScaleToggle = (props) => {\n    if (!localStorage.getItem('tempScale')) {\n        localStorage.setItem('tempScale', 'celsius');\n    }\n    const [value, setValue] = useState(localStorage.getItem('tempScale'));\n    return (\n        <div className='TempScaleToggle'>\n            <ToggleButtonGroup\n                color='secondary'\n                value={value}\n                exclusive\n                fullWidth={true}\n                sx={{height: '20px'}}\n                onChange={() => {\n                    if (value === 'celsius') {\n                        setValue('fahrenheit')\n                        props.changeTempScale('fahrenheit');\n                        localStorage.setItem('tempScale', 'fahrenheit')\n                    } else {\n                        setValue('celsius')\n                        props.changeTempScale('celsius')\n                        localStorage.setItem('tempScale', 'celsius')\n                    }\n                }}\n            >\n                <ToggleButton\n                    value='fahrenheit'\n                    sx={{\n                        '&.MuiToggleButton-root': {\n                            borderRadius: '20px',\n                            backgroundColor: 'transparent',\n                            borderColor: '#F9FBFF',\n                            color: '#2d81ff',\n                            textTransform: 'capitalize',\n                        },\n                        '&.Mui-selected': {\n                            backgroundColor: '#6BA6FF',\n                            borderColor: '#6BA6FF',\n                            color: '#ffffff',\n                        },\n                        '&.Mui-selected:hover': {\n                            backgroundColor: '#5096ff',\n                            color: '#ffffff',\n                        },\n                    }}\n                >\n                    Fahrenheit\n                </ToggleButton>\n                <ToggleButton\n                    value='celsius'\n                    sx={{\n                        '&.MuiToggleButton-root': {\n                            borderRadius: '20px',\n                            backgroundColor: 'transparent',\n                            borderColor: '#F9FBFF',\n                            color: '#2d81ff',\n                            textTransform: 'capitalize',\n                        },\n                        '&.Mui-selected': {\n                            backgroundColor: '#6BA6FF',\n                            borderColor: '#6BA6FF',\n                            color: '#ffffff',\n                        },\n                        '&.Mui-selected:hover': {\n                            backgroundColor: '#5096ff',\n                            color: '#ffffff',\n                        },\n                    }}\n                >\n                    Celsius\n                </ToggleButton>\n            </ToggleButtonGroup>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state) => ({\n    tempScale: state.weatherData.tempScale,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    changeTempScale: (value) => {\n        dispatch(changeTempScale(value));\n    },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TempScaleToggle);\n","import React, {useEffect} from \"react\";\r\nimport \"../styles/CitiesPage.css\";\r\nimport CitiesPageBackButton from \"../components/CitiesPageBackButton\";\r\nimport CitiesList from \"../components/CitiesList\";\r\nimport TempScaleToggle from \"../components/TempScaleToggle\";\r\nimport {connect} from \"react-redux\";\r\nimport {fetchCityTemp} from \"../store/favoriteCitiesReducer/favoriteCitiesReducer\";\r\n\r\nconst CitiesPage = (props) => {\r\n    // const fifteenMinutes = 90000;\r\n    // const currentDate = Date.now();\r\n    //\r\n    // useEffect(() => {\r\n    //     props.cities.forEach((obj) => {\r\n    //         if(currentDate - obj.lastUpdated > fifteenMinutes) {\r\n    //             props.fetchCityTemp(obj.city)\r\n    //         }\r\n    //         localStorage.setItem('cities', JSON.stringify(props.cities));\r\n    //     })\r\n    // }, [])\r\n\r\n    return (\r\n        <div className='cities-page'>\r\n            <CitiesPageBackButton/>\r\n            <div className='cities-page__list'>\r\n                <h1 className='cities-page-header'>Favorite cities</h1>\r\n                <CitiesList/>\r\n            </div>\r\n            <div className='cities-page__settings'>\r\n                <h1 className='cities-page-header'>Settings</h1>\r\n                <TempScaleToggle/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    cities: state.cities.arrOfCities\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    fetchCityTemp: (city) => {\r\n        dispatch(fetchCityTemp(city));\r\n    }\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CitiesPage);\r\n","import React, {useEffect} from 'react';\r\nimport FavoriteCityButton from \"../components/FavoriteCityButton\";\r\nimport {Link, useHistory} from \"react-router-dom\";\r\nimport ListButton from \"../components/UI/ListButton\";\r\nimport CitySearch from \"../components/CitySearch\";\r\nimport Forecast from \"../components/Forecast\";\r\nimport {useParams} from 'react-router-dom';\r\nimport {connect} from \"react-redux\";\r\n\r\nconst CityPage = (props) => {\r\n    const params = useParams();\r\n    const router = useHistory();\r\n\r\n    // Redirect to the home page if you start looking for another city\r\n    useEffect(() => {\r\n        if (props.location !== params.city) {\r\n            router.push('/SimpleWeather');\r\n        }\r\n    }, [props.location])\r\n\r\n    return (\r\n        <div>\r\n            <div className='app'>\r\n                <FavoriteCityButton/>\r\n                <Link to='/SimpleWeather/cities' className='app__list-button'>\r\n                    <ListButton/>\r\n                </Link>\r\n                <CitySearch/>\r\n                <Forecast/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    location: state.weatherData.location\r\n})\r\n\r\nexport default connect(mapStateToProps)(CityPage);","import React from 'react';\r\nimport {Redirect, Route, Router, Switch} from 'react-router-dom';\r\nimport WeatherToday from './pages/WeatherToday';\r\nimport {history} from './historyVar';\r\nimport CitiesPage from \"./pages/CitiesPage\";\r\nimport CityPage from \"./pages/CityPage\";\r\n\r\n\r\nconst App = () => {\r\n    return (\r\n        <Router history={history}>\r\n            <Switch>\r\n                <Route exact path='/SimpleWeather'>\r\n                    <WeatherToday/>\r\n                </Route>\r\n                <Route exact path='/SimpleWeather/cities'>\r\n                    <CitiesPage/>\r\n                </Route>\r\n                <Route exact path='/SimpleWeather/cities/:city'>\r\n                    <CityPage/>\r\n                </Route>\r\n                <Redirect to='/SimpleWeather'/>\r\n            </Switch>\r\n        </Router>\r\n    );\r\n};\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux'\r\nimport store from './store/store'\r\nimport App from './App';\r\nimport './index.css';\r\nimport './styles/adaptiveApp.css'\r\nimport {getCitiesFromLocaleStorage} from \"./store/favoriteCitiesReducer/favoriteCitiesReducer\";\r\nimport {createTheme} from \"@mui/material\";\r\nimport {ThemeProvider} from \"@emotion/react\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {changeTempScale} from \"./store/weatherReducer/weatherReducer\";\r\n\r\nif (!localStorage.getItem('cities')) {\r\n    localStorage.setItem('cities', '[]');\r\n} else {\r\n    const citiesStr = localStorage.getItem('cities')\r\n    const cities = JSON.parse(citiesStr);\r\n    store.dispatch(getCitiesFromLocaleStorage(cities));\r\n}\r\n\r\nif (localStorage.getItem('tempScale')) {\r\n    store.dispatch(changeTempScale(localStorage.getItem('tempScale')))\r\n}\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#ffffff',\r\n            darker: '#ffffff'\r\n        },\r\n        secondary: {\r\n            main: '#2d81ff',\r\n            darker: '#2d81ff'\r\n        }\r\n    }\r\n});\r\n\r\n\r\nconst rootElement = document.getElementById('root')\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <ThemeProvider theme={theme}>\r\n            <BrowserRouter basename='/SimpleWeather'>\r\n                <App/>\r\n            </BrowserRouter>\r\n        </ThemeProvider>\r\n    </Provider>,\r\n    rootElement\r\n)\r\n"],"sourceRoot":""}