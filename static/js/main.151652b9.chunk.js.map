{"version":3,"sources":["functions/fetchData.js","store/weatherReducer.js","store/favoriteCitiesReducer.js","store/store.js","components/WeatherCondition.js","components/CitySearch.js","components/WeatherIcon.js","components/TempScale.js","components/Forecast.js","components/UI/FavoriteButton.js","components/FavoriteCityButton.js","components/UI/ListButton.js","pages/WeatherToday.js","functions/useDebounce.js","historyVar.js","components/UI/BackButton.js","components/CitiesPageBackButton.js","components/CitiesList.js","components/TempScaleToggle.js","pages/Cities.js","App.js","index.js"],"names":["fetchData","location","a","fetch","response","json","data","console","log","error","SET_CITY","UPDATE_WEATHER","CHANGE_TEMP_SCALE","setCity","city","type","payload","changeTempScale","initialState","responseLocation","country","temp_c","temp_f","condition","wind","pressure","humidity","code","isDay","tempScale","ADD_TO_FAVORITES","REMOVE_FROM_FAVORITES","GET_CITIES","citiesState","arrOfCities","addToFavorites","dispatch","store","addCity","removeFromFavorites","removeCity","composedEnhancer","composeWithDevTools","applyMiddleware","thunkMiddleware","rootReducer","combineReducers","cities","state","action","filter","weatherData","toLowerCase","name","current","text","wind_kph","pressure_mb","is_day","createStore","connect","props","className","onChange","event","target","value","minWidth","inputStyle","fontSize","fontWeight","display","e","timeOfDay","weatherSrc","process","toFixed","windToMPS","pressureToMmOfMercury","FavoriteButton","Checkbox","icon","FavoriteBorder","checkedIcon","Favorite","size","sx","color","favoriteCities","useState","includes","isFavorite","setFavorite","isDisabled","setDisabled","useEffect","localStorage","setItem","JSON","stringify","onClick","disabled","checked","ListButton","IconButton","WeatherToday","to","useDebounce","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","history","createBrowserHistory","BackButton","CitiesPageBackButton","backgroundColor","length","map","getItem","setValue","ToggleButtonGroup","exclusive","fullWidth","height","ToggleButton","borderRadius","borderColor","textTransform","Cities","debouncedLocation","trim","memoLoadWeather","useCallback","fetchWeather","exact","path","citiesStr","parse","getCitiesFromLocaleStorage","theme","createTheme","palette","primary","main","darker","secondary","rootElement","document","getElementById","ReactDOM","render","basename"],"mappings":"0XAAMA,EAAS,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,+EAESC,MAAM,oFAAD,OAAqFF,EAArF,YAFd,cAERG,EAFQ,gBAGKA,EAASC,OAHd,cAGRC,EAHQ,OAIdC,QAAQC,IAAIF,GAJE,kBAKPA,GALO,kCAOdC,QAAQE,MAAR,MAPc,0DAAH,sDAaAT,ICVFU,EAAW,WACXC,EAAiB,iBACjBC,EAAoB,oBAE1B,SAASC,EAAQC,GACpB,MAAO,CAAEC,KAAML,EAAUM,QAASF,GAO/B,SAASG,EAAgBb,GAC/B,MAAO,CAAEW,KAAMH,EAAmBI,QAASZ,GAGrC,IAAMc,EAAe,CACxBjB,SAAU,GACVkB,iBAAkB,GAClBC,QAAS,GACTC,OAAQ,GACRC,OAAQ,GACRC,UAAW,GACXC,KAAM,GACNC,SAAU,GACVC,SAAU,GACVC,KAAM,GACNC,MAAO,GACPC,UAAW,WA+BR,I,QC5DMC,EAAmB,mBACnBC,EAAwB,wBACxBC,EAAa,aAcnB,IAAMC,EAAc,CACzBC,YAAa,IAwBR,IAAMC,EAAiB,SAACrB,GAAD,OAAU,SAACsB,GACvCC,EAAMD,SAtCD,SAAiBtB,GACtB,MAAO,CAAEC,KAAMe,EAAkBd,QAASF,GAqC3BwB,CAAQxB,MAEZyB,EAAsB,SAACzB,GAAD,OAAU,SAACsB,GAC5CC,EAAMD,SArCD,SAAoBtB,GACzB,MAAO,CAAEC,KAAMgB,EAAuBf,QAASF,GAoChC0B,CAAW1B,MCzCtB2B,EAAmBC,8BAAoBC,0BAAgBC,MAEvDC,EAAcC,0BAAiB,CACnCC,ODaK,WAA6D,IAA9BC,EAA6B,uDAArBf,EAAagB,EAAQ,uCACjE,OAAQA,EAAOlC,MACb,KAAKe,EACH,OAAO,2BAAKkB,GAAZ,IAAmBd,YAAY,GAAD,mBAAMc,EAAMd,aAAZ,CAAyBe,EAAOjC,YAChE,KAAKe,EACH,OAAO,2BACFiB,GADL,IAEEd,YAAac,EAAMd,YAAYgB,QAC7B,SAACpC,GAAD,OAAUA,IAASmC,EAAOjC,aAGhC,KAAKgB,EACH,OAAO,2BACFgB,GADL,IAEEd,YAAae,EAAOjC,UAExB,QACE,OAAOgC,IC7BXG,YFwBK,WAAuD,IAA/BH,EAA8B,uDAAtB9B,EAAc+B,EAAQ,uCACzD,OAAQA,EAAOlC,MACX,KAAKL,EACD,OAAO,2BAAKsC,GAAZ,IAAmB/C,SAAUgD,EAAOjC,QAAQoC,gBAChD,KAAKzC,EACD,OAAO,2BACAqC,GADP,IAEI7B,iBAAkB8B,EAAOjC,QAAQf,SAASoD,KAC1CjC,QAAS6B,EAAOjC,QAAQf,SAASmB,QACjCC,OAAQ4B,EAAOjC,QAAQsC,QAAQjC,OAC/BC,OAAQ2B,EAAOjC,QAAQsC,QAAQhC,OAC/BC,UAAU,QAAD,OAAU0B,EAAOjC,QAAQsC,QAAQ/B,UAAUgC,KAAKH,eACzD5B,KAAMyB,EAAOjC,QAAQsC,QAAQE,SAC7B/B,SAAUwB,EAAOjC,QAAQsC,QAAQG,YACjC/B,SAAUuB,EAAOjC,QAAQsC,QAAQ5B,SACjCC,KAAMsB,EAAOjC,QAAQsC,QAAQ/B,UAAUI,KACvCC,MAAOqB,EAAOjC,QAAQsC,QAAQI,SAEtC,KAAK9C,EACD,OAAO,2BACAoC,GADP,IAEInB,UAAWoB,EAAOjC,UAE1B,QACI,OAAOgC,ME5CJX,EADHsB,sBAAYd,EAAaJ,G,8CCStBmB,eANS,SAACZ,GAAD,MAAY,CAClC/C,SAAU+C,EAAMG,YAAYlD,SAC5BkB,iBAAkB6B,EAAMG,YAAYhC,iBACpCI,UAAWyB,EAAMG,YAAY5B,aAGhBqC,EAlBU,SAACC,GACxB,OAAGA,EAAM5D,SAASmD,gBAAkBS,EAAM1C,iBAAiBiC,cAErD,qBAAKU,UAAU,YAAf,SAA4BD,EAAMtC,YAIlC,4BCsBOqC,eAVS,SAACZ,GAAD,MAAY,CAClC/C,SAAU+C,EAAMG,YAAYlD,aAGH,SAACmC,GAAD,MAAe,CACxC2B,SAAU,SAACC,GACT5B,EAASvB,EAAQmD,EAAMC,OAAOC,YAInBN,EA1BI,SAACC,GAClB,OACE,sBAAKC,UAAU,SAAf,UACE,8CACA,cAAC,IAAD,CACE/C,KAAK,OACLoD,SAAS,KACTC,WAAY,CAAEC,SAAU,GAAIC,WAAY,IAAKC,QAAS,SACtDL,MAAOL,EAAM5D,SACb8D,SAAU,SAACS,GAAD,OAAOX,EAAME,SAASS,MAElC,cAAC,EAAD,UCMSZ,eAJS,SAACZ,GAAD,MAAY,CAClCrB,KAAMqB,EAAMG,YAAYxB,KACxBC,MAAOoB,EAAMG,YAAYvB,SAEZgC,EApBK,SAACC,GACnB,IAAIY,EAAY,MACXZ,EAAMjC,QACT6C,EAAY,SAGd,IAAMC,EAAU,wBAAoBD,EAApB,YAAiCZ,EAAMlC,KAAvC,QAEhB,OACE,qBAAKmC,UAAU,gBAAf,SACE,wBAAQxD,KAAMqE,iBAAyBD,EAAYZ,UAAU,gBAAiB/C,KAAK,gBAAgB,aAAW,yBCWrG6C,eANS,SAACZ,GAAD,MAAY,CAChCnB,UAAWmB,EAAMG,YAAYtB,UAC7BR,OAAQ2B,EAAMG,YAAY9B,OAC1BC,OAAQ0B,EAAMG,YAAY7B,UAGfsC,EAtBG,SAACC,GACf,MAAuB,YAApBA,EAAMhC,UAED,oBAAIiC,UAAU,UAAd,SACKD,EAAMxC,OAAOuD,YAKlB,oBAAKd,UAAU,aAAf,SACKD,EAAMvC,OAAOsD,eC6BfhB,eARS,SAACZ,GAAD,MAAY,CAClC/C,SAAU+C,EAAMG,YAAYlD,SAC5BkB,iBAAkB6B,EAAMG,YAAYhC,iBACpCK,KAAMwB,EAAMG,YAAY3B,KACxBC,SAAUuB,EAAMG,YAAY1B,SAC5BC,SAAUsB,EAAMG,YAAYzB,YAGfkC,EAnCE,SAACC,GAEhB,IAAMgB,GAA0B,IAAbhB,EAAMrC,KAAc,MAAMoD,QAAQ,GAE/CE,GAA2C,iBAAjBjB,EAAMpC,UAA8BmD,UACpE,OAAIf,EAAM1C,kBAAoB0C,EAAM5D,SAASmD,gBAAkBS,EAAM1C,iBAAiBiC,cAE9E,sBAAKU,UAAU,eAAf,UACI,cAAC,EAAD,IACA,qBAAKA,UAAU,gBAAf,SACI,cAAC,EAAD,CAAWA,UAAU,0BAEzB,sBAAKA,UAAU,2BAAf,UACI,sBAAKA,UAAU,oBAAf,UAAoCe,EAAU,0CAE9C,sBAAKf,UAAU,oBAAf,UAAoCgB,EAAsB,4CAC1D,sBAAKhB,UAAU,oBAAf,UAAoCD,EAAMnC,SAAS,8CAM3D,2B,kCCVKqD,EAhBQ,SAAClB,GACtB,OACE,cAACmB,EAAA,EAAD,2BACMnB,GADN,IAEEoB,KAAM,cAACC,EAAA,EAAD,IACNC,YAAa,cAACC,EAAA,EAAD,IACbC,KAAK,QACLC,GAAI,CACFC,MAAO,QACP,gBAAiB,CACfA,MAAO,cCiDF3B,eAfS,SAACZ,GAAD,MAAY,CAClC/C,SAAU+C,EAAMG,YAAYlD,SAC5BuF,eAAgBxC,EAAMD,OAAOb,YAC7Bf,iBAAkB6B,EAAMG,YAAYhC,qBAGX,SAACiB,GAAD,MAAe,CACxCD,eAAgB,SAACrB,GACfsB,EAASD,EAAerB,KAE1ByB,oBAAqB,SAACzB,GACpBsB,EAASG,EAAoBzB,QAIlB8C,EAzDY,SAACC,GAC1B,MAAkC4B,mBAChC5B,EAAM2B,eAAeE,SAAS7B,EAAM5D,WADtC,mBAAO0F,EAAP,KAAmBC,EAAnB,KAGA,EAAkCH,oBAAS,GAA3C,mBAAOI,EAAP,KAAmBC,EAAnB,KAqBA,OAnBAC,qBAAU,WACRH,EAAY/B,EAAM2B,eAAeE,SAAS7B,EAAM5D,aAC/C,CAAC4D,EAAM5D,WAEV8F,qBAAU,WAENlC,EAAM5D,UACN4D,EAAM5D,WAAa4D,EAAM1C,iBAAiBiC,cAE1C0C,GAAY,GAEZA,GAAY,KAEb,CAACjC,EAAM5D,SAAU4D,EAAM1C,mBAE1B4E,qBAAU,WACRC,aAAaC,QAAQ,SAAUC,KAAKC,UAAUtC,EAAM2B,mBACnD,CAAC3B,EAAM2B,iBAGR,cAAC,EAAD,CACEY,QAAS,WACFT,GAIH9B,EAAMtB,oBAAoBsB,EAAM5D,UAChC2F,GAAaD,KAJb9B,EAAM1B,eAAe0B,EAAM5D,UAC3B2F,GAAaD,KAMjBU,SAAUR,EACVS,QAASX,O,0BC9BAY,EARI,WACjB,OACE,cAACC,EAAA,EAAD,CAAYnB,KAAK,QAAQC,GAAI,CAAEC,MAAO,SAAtC,SACE,cAAC,IAAD,CAAwBlB,SAAS,a,QCexBoC,EAfM,WACnB,OACE,8BACI,sBAAK3C,UAAU,MAAf,UACI,cAAC,EAAD,IACA,cAAC,IAAD,CAAM4C,GAAG,wBAAwB5C,UAAU,mBAA3C,SACI,cAAC,EAAD,MAEJ,cAAC,EAAD,IACA,cAAC,EAAD,UCDG6C,MAbf,SAAqBzC,EAAO0C,GAC1B,MAA4CnB,mBAASvB,GAArD,mBAAO2C,EAAP,KAAuBC,EAAvB,KASA,OAPAf,qBACE,WACE,IAAMgB,EAAUC,YAAW,kBAAMF,EAAkB5C,KAAQ0C,GAC3D,OAAO,kBAAMK,aAAaF,MACzB,CAACH,EAAO1C,IAGN2C,G,SCVIK,GAAUC,e,4BCURC,GARI,SAACvD,GAChB,OACI,cAAC2C,EAAA,EAAD,yBAAYnB,KAAK,SAAYxB,GAA7B,aACI,cAAC,KAAD,CAAeQ,SAAS,cCKrBgD,GARc,WAC3B,OACE,cAAC,IAAD,CAAMX,GAAG,iBAAiB5C,UAAU,wBAApC,SACE,cAAC,GAAD,CAAYwB,GAAI,CAAEC,MAAO,UAAW,6BAA8B,CAAE+B,gBAAiB,kCC6B5E1D,I,MAAAA,aALS,SAACZ,GAAD,MAAY,CAChCD,OAAQC,EAAMD,OAAOb,eAIV0B,EAhCI,SAACC,GAChB,OAAGA,EAAMd,OAAOwE,OAAS,EAEjB,sBAAKzD,UAAU,mBAAf,UACI,qBAAKA,UAAU,cACf,qBAAKA,UAAU,SAAf,SACKD,EAAMd,OAAOyE,KAAI,SAAA1G,GAAI,OAClB,qBAAKgD,UAAU,eAAf,SAA+BhD,YAO3C,sBAAKgD,UAAU,mBAAf,UACI,qBAAKA,UAAU,cACf,sBAAKA,UAAU,eAAf,UACI,sCACA,mEAEJ,qBAAKA,UAAU,qB,oBCoEhBF,I,MAAAA,aAVS,SAACZ,GAAD,MAAY,CAClCnB,UAAWmB,EAAMG,YAAYtB,cAGJ,SAACO,GAAD,MAAe,CACxCnB,gBAAiB,SAACiD,GAChB9B,EAASnB,EAAgBiD,QAIdN,EAtFS,SAACC,GACjBmC,aAAayB,QAAQ,cACrBzB,aAAaC,QAAQ,YAAa,WAEvC,MAA0BR,mBAASO,aAAayB,QAAQ,cAAxD,mBAAOvD,EAAP,KAAcwD,EAAd,KACD,OACE,qBAAK5D,UAAU,kBAAf,SACE,eAAC6D,GAAA,EAAD,CACEpC,MAAM,YACNrB,MAAOA,EACP0D,WAAS,EACTC,UAAU,OACVvC,GAAI,CAAEwC,OAAQ,QACd/D,SAAU,WACK,YAAVG,GACCwD,EAAS,cACT7D,EAAM5C,gBAAgB,cACtB+E,aAAaC,QAAQ,YAAa,gBAElCyB,EAAS,WACT7D,EAAM5C,gBAAgB,WACtB+E,aAAaC,QAAQ,YAAa,aAd1C,UAkBE,cAAC8B,GAAA,EAAD,CACE7D,MAAM,aACNoB,GAAI,CACF,yBAA0B,CACxB0C,aAAc,OACdV,gBAAiB,cACjBW,YAAa,UACb1C,MAAO,UACP2C,cAAe,cAEjB,iBAAkB,CAChBZ,gBAAiB,UACjBW,YAAa,UACb1C,MAAO,WAET,uBAAwB,CACtB+B,gBAAiB,UACjB/B,MAAO,YAjBb,wBAuBA,cAACwC,GAAA,EAAD,CACE7D,MAAM,UACNoB,GAAI,CACF,yBAA0B,CACxB0C,aAAc,OACdV,gBAAiB,cACjBW,YAAa,UACb1C,MAAO,UACP2C,cAAe,cAEjB,iBAAkB,CAChBZ,gBAAiB,UACjBW,YAAa,UACb1C,MAAO,WAET,uBAAwB,CACtB+B,gBAAiB,UACjB/B,MAAO,YAjBb,8BChCO4C,GAhBA,WACb,OACE,sBAAKrE,UAAU,cAAf,UACI,cAAC,GAAD,IACF,sBAAKA,UAAU,oBAAf,UACE,oBAAIA,UAAU,qBAAd,6BACA,cAAC,GAAD,OAEA,sBAAKA,UAAU,wBAAf,UACI,oBAAIA,UAAU,qBAAd,sBACA,cAAC,GAAD,WCsCGF,gBAJS,SAACZ,GAAD,MAAY,CAClC/C,SAAU+C,EAAMG,YAAYlD,SAC5BuF,eAAgBxC,EAAMD,OAAOb,eAEhB0B,EA3CH,SAACC,GACXkC,qBAAU,WACJC,aAAayB,QAAQ,aAAkC,KAAnB5D,EAAM5D,UAC5CoC,EAAMD,SAASvB,EAAQmF,aAAayB,QAAQ,gBAE7C,IAEH1B,qBAAU,WACR,OAAO,WACLC,aAAaC,QAAQ,WAAYpC,EAAM5D,aAExC,IAEH,IAAMmI,EAAoBzB,EAAY9C,EAAM5D,SAASoI,OAAQ,KAEvDC,EAAkBC,sBnBoCE,SAACH,GAAD,8CAAuB,WAAOhG,GAAP,eAAAlC,EAAA,+EAEvBF,EAAUoI,GAFa,OAErC9H,EAFqC,OAG3C+B,EAAMD,SArDH,CAAErB,KAAMJ,EAAgBK,QAqDEV,IAC7B0F,aAAaC,QAAQ,WAAY3F,EAAKL,SAASoD,MAJJ,gDAM3C9C,QAAQE,MAAR,MAN2C,yDAAvB,sDmBpCU+H,CAAaJ,GAAoB,CAACA,IAQtE,OANArC,qBAAU,WACJqC,GACFE,MAED,CAACF,EAAmBE,IAGrB,cAAC,IAAD,CAAQpB,QAASA,GAAjB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOuB,OAAK,EAACC,KAAK,iBAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,wBAAlB,SACE,cAAC,GAAD,MAEF,cAAC,IAAD,CAAUhC,GAAG,2B,gCC7BrB,GAAIV,aAAayB,QAAQ,UAElB,CACH,IAAMkB,GAAY3C,aAAayB,QAAQ,UACjC1E,GAASmD,KAAK0C,MAAMD,IAC1BtG,EAAMD,SnBLH,SAAoCW,GACzC,MAAO,CAAEhC,KAAMiB,EAAYhB,QAAS+B,GmBInB8F,CAA2B9F,UAJ1CiD,aAAaC,QAAQ,SAAU,MAOhCD,aAAayB,QAAQ,cACpBpF,EAAMD,SAASnB,EAAgB+E,aAAayB,QAAQ,eAGxD,IAAMqB,GAAQC,aAAY,CACtBC,QAAS,CACLC,QAAS,CACLC,KAAM,UACNC,OAAQ,WAEZC,UAAW,CACPF,KAAM,UACNC,OAAQ,cAOdE,GAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,IAAD,CAAUpH,MAAOA,EAAjB,SACI,cAAC,KAAD,CAAeyG,MAAOA,GAAtB,SACI,cAAC,IAAD,CAAeY,SAAS,iBAAxB,SACI,cAAC,GAAD,UAIZL,M","file":"static/js/main.151652b9.chunk.js","sourcesContent":["const fetchData = async (location) => {\r\n  try {\r\n    const response = await fetch(`https://api.weatherapi.com/v1/current.json?key=82774a2578a94d41a08172943211710&q=${location}&aqi=no`);\r\n    const data = await response.json();\r\n    console.log(data);\r\n    return data;\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n};\r\n\r\n\r\n\r\nexport default fetchData;","import fetchData from \"../functions/fetchData\";\r\nimport store from \"./store\";\r\n\r\nexport const SET_CITY = \"SET_CITY\";\r\nexport const UPDATE_WEATHER = \"UPDATE_WEATHER\";\r\nexport const CHANGE_TEMP_SCALE = \"CHANGE_TEMP_SCALE\";\r\n\r\nexport function setCity(city) {\r\n    return { type: SET_CITY, payload: city };\r\n}\r\n\r\nexport function updateWeather(response) {\r\n    return { type: UPDATE_WEATHER, payload: response };\r\n}\r\n\r\nexport function changeTempScale(response) {\r\n return { type: CHANGE_TEMP_SCALE, payload: response };\r\n}\r\n\r\nexport const initialState = {\r\n    location: \"\",\r\n    responseLocation: \"\",\r\n    country: \"\",\r\n    temp_c: \"\",\r\n    temp_f: \"\",\r\n    condition: \"\",\r\n    wind: \"\",\r\n    pressure: \"\",\r\n    humidity: \"\",\r\n    code: \"\",\r\n    isDay: \"\",\r\n    tempScale: \"celsius\"\r\n};\r\n\r\nexport function weatherReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_CITY:\r\n            return { ...state, location: action.payload.toLowerCase() };\r\n        case UPDATE_WEATHER:\r\n            return {\r\n                ...state,\r\n                responseLocation: action.payload.location.name,\r\n                country: action.payload.location.country,\r\n                temp_c: action.payload.current.temp_c,\r\n                temp_f: action.payload.current.temp_f,\r\n                condition: `it's ${action.payload.current.condition.text.toLowerCase()}`,\r\n                wind: action.payload.current.wind_kph,\r\n                pressure: action.payload.current.pressure_mb,\r\n                humidity: action.payload.current.humidity,\r\n                code: action.payload.current.condition.code,\r\n                isDay: action.payload.current.is_day,\r\n            };\r\n        case CHANGE_TEMP_SCALE:\r\n            return {\r\n                ...state,\r\n                tempScale: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const fetchWeather = (debouncedLocation) => async (dispatch) => {\r\n    try {\r\n        const data = await (fetchData(debouncedLocation));\r\n        store.dispatch(updateWeather(data));\r\n        localStorage.setItem('location', data.location.name);\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n}","import store from \"./store\";\r\n\r\nexport const ADD_TO_FAVORITES = \"ADD_TO_FAVORITES\";\r\nexport const REMOVE_FROM_FAVORITES = \"REMOVE_FROM_FAVORITES\";\r\nexport const GET_CITIES = \"GET_CITIES\";\r\n\r\nexport function addCity(city) {\r\n  return { type: ADD_TO_FAVORITES, payload: city };\r\n}\r\n\r\nexport function removeCity(city) {\r\n  return { type: REMOVE_FROM_FAVORITES, payload: city };\r\n}\r\n\r\nexport function getCitiesFromLocaleStorage(cities) {\r\n  return { type: GET_CITIES, payload: cities };\r\n}\r\n\r\nexport const citiesState = {\r\n  arrOfCities: [],\r\n};\r\n\r\nexport function favoriteCitiesReducer(state = citiesState, action) {\r\n  switch (action.type) {\r\n    case ADD_TO_FAVORITES:\r\n      return { ...state, arrOfCities: [...state.arrOfCities, action.payload] };\r\n    case REMOVE_FROM_FAVORITES:\r\n      return {\r\n        ...state,\r\n        arrOfCities: state.arrOfCities.filter(\r\n          (city) => city !== action.payload\r\n        ),\r\n      };\r\n    case GET_CITIES:\r\n      return {\r\n        ...state,\r\n        arrOfCities: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const addToFavorites = (city) => (dispatch) => {\r\n  store.dispatch(addCity(city));\r\n};\r\nexport const removeFromFavorites = (city) => (dispatch) => {\r\n  store.dispatch(removeCity(city));\r\n};","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport {weatherReducer} from \"./weatherReducer\";\r\nimport {favoriteCitiesReducer} from \"./favoriteCitiesReducer\";\r\n\r\nconst composedEnhancer = composeWithDevTools(applyMiddleware(thunkMiddleware))\r\n\r\nconst rootReducer = combineReducers( {\r\n  cities: favoriteCitiesReducer,\r\n  weatherData: weatherReducer\r\n})\r\n\r\nlet store = createStore(rootReducer, composedEnhancer);\r\nexport default store;","import React from 'react';\r\nimport '../styles/Forecast.css';\r\nimport { connect } from 'react-redux';\r\n\r\nconst WeatherCondition = (props) => {\r\n  if(props.location.toLowerCase() === props.responseLocation.toLowerCase()) {\r\n    return (\r\n        <div className=\"condition\">{props.condition}</div>\r\n    )\r\n  } else {\r\n    return (\r\n        <span/>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  location: state.weatherData.location,\r\n  responseLocation: state.weatherData.responseLocation,\r\n  condition: state.weatherData.condition,\r\n})\r\n\r\nexport default connect(mapStateToProps)(WeatherCondition);\r\n\r\n","import React, { useEffect, useState } from \"react\";\r\nimport AutosizeInput from \"react-input-autosize\";\r\nimport { connect } from \"react-redux\";\r\nimport \"../styles/CitySearch.css\";\r\nimport WeatherCondition from \"./WeatherCondition\";\r\nimport { setCity } from \"../store/weatherReducer\";\r\n\r\nconst CitySearch = (props) => {\r\n  return (\r\n    <div className=\"search\">\r\n      <h1>Right now in</h1>\r\n      <AutosizeInput\r\n        type=\"text\"\r\n        minWidth=\"70\"\r\n        inputStyle={{ fontSize: 35, fontWeight: 600, display: \"block\" }}\r\n        value={props.location}\r\n        onChange={(e) => props.onChange(e)}\r\n      />\r\n      <WeatherCondition />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  location: state.weatherData.location\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onChange: (event) => {\r\n    dispatch(setCity(event.target.value));\r\n  }\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CitySearch);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport \"../styles/Forecast.css\";\r\n\r\nconst WeatherIcon = (props) => {\r\n  let timeOfDay = \"day\";\r\n  if (!props.isDay) {\r\n    timeOfDay = \"night\";\r\n  }\r\n\r\n  const weatherSrc = `/assets/icons/${timeOfDay}/${props.code}.svg`;\r\n\r\n  return (\r\n    <div className=\"weather__icon\">\r\n      <object data={process.env.PUBLIC_URL + weatherSrc} className=\"weather__icon\"  type=\"image/svg+xml\" aria-label=\"icon of weather\"/>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  code: state.weatherData.code,\r\n  isDay: state.weatherData.isDay\r\n})\r\nexport default connect(mapStateToProps)(WeatherIcon);","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\n\r\nconst TempScale = (props) => {\r\n    if(props.tempScale === \"celsius\") {\r\n        return (\r\n            <h1 className=\"celsius\">\r\n                {props.temp_c.toFixed()}\r\n            </h1>\r\n        )\r\n    } else {\r\n        return (\r\n            <h1  className=\"fahrenheit\">\r\n                {props.temp_f.toFixed()}\r\n            </h1>\r\n        )\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    tempScale: state.weatherData.tempScale,\r\n    temp_c: state.weatherData.temp_c,\r\n    temp_f: state.weatherData.temp_f\r\n})\r\n\r\nexport default connect(mapStateToProps)(TempScale);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport WeatherIcon from './WeatherIcon';\r\nimport '../styles/Forecast.css';\r\nimport TempScale from \"./TempScale\";\r\n\r\nconst Forecast = (props) => {\r\n  // Conversion from kph to m/s\r\n  const windToMPS = (props.wind * 1000 / 3600).toFixed(1);\r\n  // Conversion from millibars to millimeters of mercury according to the formula\r\n  const pressureToMmOfMercury = ( props.pressure * 0.750063755419211).toFixed();\r\n  if (props.responseLocation && props.location.toLowerCase() === props.responseLocation.toLowerCase() ) {\r\n      return (\r\n          <div className=\"weather grid\">\r\n              <WeatherIcon />\r\n              <div className=\"weather__temp\">\r\n                  <TempScale className=\"weather__temp-scale\"/>\r\n              </div>\r\n              <div className=\"flex weather__properties\">\r\n                  <div className=\"properties__value\">{windToMPS}<span>m/s</span></div>\r\n\r\n                  <div className=\"properties__value\">{pressureToMmOfMercury}<span>mm Hg</span></div>\r\n                  <div className=\"properties__value\">{props.humidity}<span>%</span></div>\r\n              </div>\r\n          </div>\r\n      )\r\n  } else {\r\n      return (\r\n          <div></div>\r\n      )\r\n  }\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  location: state.weatherData.location,\r\n  responseLocation: state.weatherData.responseLocation,\r\n  wind: state.weatherData.wind,\r\n  pressure: state.weatherData.pressure,\r\n  humidity: state.weatherData.humidity,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Forecast);\r\n","import React from \"react\";\r\nimport { Favorite, FavoriteBorder } from \"@mui/icons-material\";\r\nimport { Checkbox } from \"@mui/material\";\r\nconst FavoriteButton = (props) => {\r\n  return (\r\n    <Checkbox\r\n      {...props}\r\n      icon={<FavoriteBorder />}\r\n      checkedIcon={<Favorite />}\r\n      size=\"large\"\r\n      sx={{\r\n        color: \"white\",\r\n        \"&.Mui-checked\": {\r\n          color: \"white\",\r\n        },\r\n      }}\r\n    />\r\n  );\r\n};\r\nexport default FavoriteButton;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport FavoriteButton from \"./UI/FavoriteButton\";\r\nimport {connect} from \"react-redux\";\r\nimport {addToFavorites, removeFromFavorites} from \"../store/favoriteCitiesReducer\";\r\n\r\nconst FavoriteCityButton = (props) => {\r\n  const [isFavorite, setFavorite] = useState(\r\n    props.favoriteCities.includes(props.location)\r\n  );\r\n  const [isDisabled, setDisabled] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setFavorite(props.favoriteCities.includes(props.location));\r\n  }, [props.location]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      props.location &&\r\n      props.location === props.responseLocation.toLowerCase()\r\n    ) {\r\n      setDisabled(false);\r\n    } else {\r\n      setDisabled(true);\r\n    }\r\n  }, [props.location, props.responseLocation]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"cities\", JSON.stringify(props.favoriteCities));\r\n  }, [props.favoriteCities]);\r\n\r\n  return (\r\n    <FavoriteButton\r\n      onClick={() => {\r\n        if (!isFavorite) {\r\n          props.addToFavorites(props.location);\r\n          setFavorite(!isFavorite);\r\n        } else {\r\n          props.removeFromFavorites(props.location);\r\n          setFavorite(!isFavorite);\r\n        }\r\n      }}\r\n      disabled={isDisabled}\r\n      checked={isFavorite}\r\n    />\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  location: state.weatherData.location,\r\n  favoriteCities: state.cities.arrOfCities,\r\n  responseLocation: state.weatherData.responseLocation,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addToFavorites: (city) => {\r\n    dispatch(addToFavorites(city));\r\n  },\r\n  removeFromFavorites: (city) => {\r\n    dispatch(removeFromFavorites(city));\r\n  },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FavoriteCityButton);\r\n","import React from \"react\";\r\nimport { IconButton } from \"@mui/material\";\r\nimport FormatListBulletedIcon from '@mui/icons-material/FormatListBulleted';\r\n\r\nconst ListButton = () => {\r\n  return (\r\n    <IconButton size=\"large\" sx={{ color: \"white\"}}>\r\n      <FormatListBulletedIcon fontSize=\"large\"/>\r\n    </IconButton>\r\n  );\r\n};\r\n\r\nexport default ListButton;\r\n","import React from \"react\";\r\nimport CitySearch from \"../components/CitySearch\";\r\nimport Forecast from \"../components/Forecast\";\r\nimport FavoriteCityButton from \"../components/FavoriteCityButton\";\r\nimport ListButton from \"../components/UI/ListButton\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst WeatherToday = () => {\r\n  return (\r\n    <div>\r\n        <div className=\"app\">\r\n            <FavoriteCityButton />\r\n            <Link to=\"/SimpleWeather/cities\" className=\"app__list-button\">\r\n                <ListButton />\r\n            </Link>\r\n            <CitySearch />\r\n            <Forecast />\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherToday;\r\n","import { useEffect, useState } from 'react';\r\n\r\nfunction useDebounce(value, delay) {\r\n  const [debouncedValue, setDebouncedValue] = useState(value);\r\n\r\n  useEffect(\r\n    () => {\r\n      const handler = setTimeout(() => setDebouncedValue(value), delay);\r\n      return () => clearTimeout(handler);\r\n    }, [delay, value],\r\n  );\r\n\r\n  return debouncedValue;\r\n}\r\n\r\nexport default useDebounce;","import { createBrowserHistory } from 'history';\r\n\r\nexport const history = createBrowserHistory();\r\n","import React from 'react';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport {IconButton} from \"@mui/material\";\r\n\r\nconst BackButton = (props) => {\r\n    return (\r\n        <IconButton size=\"large\" {...props}>\r\n            <ArrowBackIcon fontSize=\"large\"/>\r\n        </IconButton>\r\n    );\r\n};\r\n\r\nexport default BackButton;","import React from \"react\";\r\nimport BackButton from \"./UI/BackButton\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst CitiesPageBackButton = () => {\r\n  return (\r\n    <Link to=\"/SimpleWeather\" className=\"cities-page__back-btn\">\r\n      <BackButton sx={{ color: \"#2D81FF\", \"&.MuiIconButton-root:hover\": { backgroundColor: \"rgba(45, 129, 255, 0.02)\" } }} />\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default CitiesPageBackButton;\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport \"../styles/CitiesList.css\";\r\n\r\nconst CitiesList = (props) => {\r\n    if(props.cities.length > 0) {\r\n        return (\r\n            <div className=\"flex cities-list\">\r\n                <div className=\"blue-line\"></div>\r\n                <div className=\"cities\">\r\n                    {props.cities.map(city =>\r\n                        <div className=\"cities__item\">{city}</div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"flex cities-list\">\r\n                <div className=\"blue-line\"></div>\r\n                <div className=\"cities-empty\">\r\n                    <p>Oops!</p>\r\n                    <p>You haven't added any city yet!</p>\r\n                </div>\r\n                <div className=\"blue-line\"></div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    cities: state.cities.arrOfCities\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps)(CitiesList);","import React, {useState} from \"react\";\nimport { ToggleButton, ToggleButtonGroup } from \"@mui/material\";\nimport \"../styles/TempScaleToggle.css\";\nimport { connect } from \"react-redux\";\nimport { changeTempScale } from \"../store/weatherReducer\";\n\nconst TempScaleToggle = (props) => {\n    if(!localStorage.getItem(\"tempScale\")) {\n        localStorage.setItem(\"tempScale\", \"celsius\");\n    }\n   const [value, setValue] = useState(localStorage.getItem(\"tempScale\"));\n  return (\n    <div className=\"TempScaleToggle\">\n      <ToggleButtonGroup\n        color=\"secondary\"\n        value={value}\n        exclusive\n        fullWidth=\"true\"\n        sx={{ height: \"20px\" }}\n        onChange={() => {\n          if(value === \"celsius\") {\n              setValue(\"fahrenheit\")\n              props.changeTempScale(\"fahrenheit\");\n              localStorage.setItem(\"tempScale\", \"fahrenheit\")\n          } else {\n              setValue(\"celsius\")\n              props.changeTempScale(\"celsius\")\n              localStorage.setItem(\"tempScale\", \"celsius\")\n          }\n        }}\n      >\n        <ToggleButton\n          value=\"fahrenheit\"\n          sx={{\n            \"&.MuiToggleButton-root\": {\n              borderRadius: \"20px\",\n              backgroundColor: \"transparent\",\n              borderColor: \"#F9FBFF\",\n              color: \"#2d81ff\",\n              textTransform: \"capitalize\",\n            },\n            \"&.Mui-selected\": {\n              backgroundColor: \"#6BA6FF\",\n              borderColor: \"#6BA6FF\",\n              color: \"#ffffff\",\n            },\n            \"&.Mui-selected:hover\": {\n              backgroundColor: \"#5096ff\",\n              color: \"#ffffff\",\n            },\n          }}\n        >\n          Fahrenheit\n        </ToggleButton>\n        <ToggleButton\n          value=\"celsius\"\n          sx={{\n            \"&.MuiToggleButton-root\": {\n              borderRadius: \"20px\",\n              backgroundColor: \"transparent\",\n              borderColor: \"#F9FBFF\",\n              color: \"#2d81ff\",\n              textTransform: \"capitalize\",\n            },\n            \"&.Mui-selected\": {\n              backgroundColor: \"#6BA6FF\",\n              borderColor: \"#6BA6FF\",\n              color: \"#ffffff\",\n            },\n            \"&.Mui-selected:hover\": {\n              backgroundColor: \"#5096ff\",\n              color: \"#ffffff\",\n            },\n          }}\n        >\n          Celsius\n        </ToggleButton>\n      </ToggleButtonGroup>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  tempScale: state.weatherData.tempScale,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  changeTempScale: (value) => {\n    dispatch(changeTempScale(value));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TempScaleToggle);\n","import React from \"react\";\r\nimport \"../styles/Cities.css\";\r\nimport CitiesPageBackButton from \"../components/CitiesPageBackButton\";\r\nimport CitiesList from \"../components/CitiesList\";\r\nimport TempScaleToggle from \"../components/TempScaleToggle\";\r\n\r\nconst Cities = () => {\r\n  return (\r\n    <div className=\"cities-page\">\r\n        <CitiesPageBackButton/>\r\n      <div className=\"cities-page__list\">\r\n        <h1 className=\"cities-page-header\">Favorite cities</h1>\r\n        <CitiesList />\r\n      </div>\r\n        <div className=\"cities-page__settings\">\r\n            <h1 className=\"cities-page-header\">Settings</h1>\r\n            <TempScaleToggle/>\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cities;\r\n","import React, { useCallback, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {Redirect, Route, Router, Switch} from 'react-router-dom';\r\nimport WeatherToday from './pages/WeatherToday';\r\nimport useDebounce from './functions/useDebounce';\r\nimport { history } from './historyVar';\r\nimport store from './store/store';\r\nimport {fetchWeather, setCity} from \"./store/weatherReducer\";\r\nimport Cities from \"./pages/Cities\";\r\n\r\n\r\nconst App = (props) => {\r\n  useEffect(() => {\r\n    if (localStorage.getItem('location') && props.location === '') {\r\n      store.dispatch(setCity(localStorage.getItem('location')));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      localStorage.setItem('location', props.location);\r\n    };\r\n  }, []);\r\n\r\n  const debouncedLocation = useDebounce(props.location.trim(), 700);\r\n\r\n  const memoLoadWeather = useCallback(fetchWeather(debouncedLocation), [debouncedLocation]);\r\n\r\n  useEffect(() => {\r\n    if (debouncedLocation) {\r\n      memoLoadWeather();\r\n    }\r\n  }, [debouncedLocation, memoLoadWeather]);\r\n\r\n  return (\r\n    <Router history={history}>\r\n      <Switch>\r\n        <Route exact path=\"/SimpleWeather\">\r\n          <WeatherToday />\r\n        </Route>\r\n        <Route exact path=\"/SimpleWeather/cities\">\r\n          <Cities />\r\n        </Route>\r\n        <Redirect to=\"/SimpleWeather\"/>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n  location: state.weatherData.location,\r\n  favoriteCities: state.cities.arrOfCities\r\n});\r\nexport default connect(mapStateToProps)(App);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\nimport store from './store/store'\r\n\r\nimport App from './App';\r\nimport './index.css';\r\nimport './styles/adaptiveApp.css'\r\nimport {getCitiesFromLocaleStorage} from \"./store/favoriteCitiesReducer\";\r\nimport {createTheme} from \"@mui/material\";\r\nimport {ThemeProvider} from \"@emotion/react\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {changeTempScale} from \"./store/weatherReducer\";\r\n\r\nif(!localStorage.getItem('cities')) {\r\n    localStorage.setItem('cities', '[]');\r\n} else {\r\n    const citiesStr = localStorage.getItem('cities')\r\n    const cities = JSON.parse(citiesStr);\r\n    store.dispatch(getCitiesFromLocaleStorage(cities));\r\n}\r\n\r\nif(localStorage.getItem(\"tempScale\")) {\r\n    store.dispatch(changeTempScale(localStorage.getItem(\"tempScale\")))\r\n}\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#ffffff',\r\n            darker: '#ffffff'\r\n        },\r\n        secondary: {\r\n            main: '#2d81ff',\r\n            darker: '#2d81ff'\r\n        }\r\n    }\r\n});\r\n\r\n\r\n\r\nconst rootElement = document.getElementById('root')\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n      <ThemeProvider theme={theme}>\r\n          <BrowserRouter basename=\"/SimpleWeather\">\r\n              <App />\r\n          </BrowserRouter>\r\n      </ThemeProvider>\r\n  </Provider>,\r\n  rootElement\r\n)\r\n"],"sourceRoot":""}